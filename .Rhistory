save_excel = TRUE,
output_path = "summary_common_alk_naive.xlsx"
)
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(
group_df = p$data,
group1_name = "ALK_KD",
group2_name = "NAIVE_KD",
save_excel = TRUE,
output_path = "summary_common_alk_naive.xlsx"
)
devtooo
devtools::load_all()
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(
group_df = p$data,
group1_name = "ALK_KD",
group2_name = "NAIVE_KD",
save_excel = TRUE,
output_path = "summary_common_alk_naive.xlsx"
)
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(
group_df = p$data,
group1_name = "ALK_KD",
group2_name = "NAIVE_KD"
output_path = "summary_common_alk_naive.xlsx"
)
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(
group_df = p$data,
group1_name = "ALK_KD",
group2_name = "NAIVE_KD",
output_path = "summary_common_alk_naive.xlsx"
)
devtools::load_all()
devtools::load_all()
d
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "ALK_KD", group2_name = "NAIVE_KD")
devtools::load_all()
summary_common_alk_naive <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "ALK_KD", group2_name = "NAIVE_KD")
writexl::write_xlsx(summary_common_alk_naive, "summary_common_alk_naive.xlsx")
str(write_xlsx)
str(summary_common_alk_naive)
flat_list <- list()
for (group_name in names(summary_common_alk_naive)) {
group <- summary_common_alk_naive[[group_name]]
for (df_name in names(group)) {
sheet_name <- paste(group_name, df_name, sep = "_")
flat_list[[sheet_name]] <- group[[df_name]]
}
}
writexl::write_xlsx(flat_list, "summary_common_alk_naive.xlsx")
# Example usage:
nested_list <- list(
group1 = list(df1 = data.frame(a=1:3, b=letters[1:3]),
df2 = data.frame(x=4:6, y=letters[4:6])),
group2 = list(df3 = data.frame(m=7:9, n=letters[7:9]))
)
# Function to save nested list to Excel
save_nested_list_to_excel <- function(nested_list, file_name) {
# Flatten the nested list into a named list of data frames
flat_list <- list()
for (group_name in names(nested_list)) {
group <- nested_list[[group_name]]
for (df_name in names(group)) {
sheet_name <- paste(group_name, df_name, sep = "_")
flat_list[[sheet_name]] <- group[[df_name]]
}
}
# Write the list to an Excel file
write_xlsx(flat_list, path = file_name)
message(paste("Excel file saved as", file_name))
}
save_nested_list_to_excel(summary_common_igf_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_igf_naive.xlsx")
save_nested_list_to_excel(summary_common_alk_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_alk_naive.xlsx")
save_nested_list_to_excel(summary_common_mettl_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_mettl_naive.xlsx")
DEG_mettl_control <- read.csv("/Users/hannalee2002/cell-lines-project/DEG/DEG_mettl_as_control.csv")
alk_vs_mettl_deg <- DEG_mettl_control %>%
select(ensembl_gene_id, alk_vs_mettl_log2FC, alk_vs_mettl_pval)
alk_tx <- filt_pooled_alk %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_mettl)
mettl_tx <- filt_pooled_mettl %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_mettl)
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_tx, mod_ratio_column = "alk_mod_raio")
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_tx, mod_ratio_column = "mettl_mod_raio")
View(filt_pooled_alk)
View(filt_pooled_alk)
View(alk_common_tx)
# calculate weighted mod ratio
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_tx)
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_tx)
# Log2FC weighted mod ratio
log2fc_wmr <- log2fc_weighted_mod_ratio(alk_weighted_mod_ratio, mettl_weighted_mod_ratio, group1_name = "ALK", group2_name = "METTL")
View(log2fc_wmr)
# plot with DEG
p <- weighted_mod_ratio_and_DGE(log2fc_wmr, alk_vs_mettl_deg, log2fc_col = "alk_vs_mettl_log2FC", padj_col = "alk_vs_mettl_pval", group1_name = "ALK_KD", group2_name = "METTL_KD")
# Save weighted mod ratio dataframes
ggsave("/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/alk_mettl.pdf", p$plot)
filt_pooled_alk <- filter_m6a_sites(pooled_alk)
filt_pooled_mettl <- filter_m6a_sites(pooled_mettl)
filt_pooled_naive <- filter_m6a_sites(pooled_naive)
filt_pooled_igf <- filter_m6a_sites(pooled_igf)
alk_tx_regions <- map_relative_tx_regions_to_m6A(data.site_proba_df = filt_pooled_alk, df_transcript_lengths = tx_df)
mettl_tx_regions <- map_relative_tx_regions_to_m6A(data.site_proba_df=filt_pooled_mettl, df_transcript_lengths = tx_df)
naive_tx_regions <- map_relative_tx_regions_to_m6A(data.site_proba_df=filt_pooled_naive, df_transcript_lengths = tx_df)
igf_tx_regions <- map_relative_tx_regions_to_m6A(data.site_proba_df=filt_pooled_igf, df_transcript_lengths = tx_df)
tx_list <- list(
alk=unique(filt_pooled_alk$ensembl_transcript_name),
mettl=unique(filt_pooled_mettl$ensembl_transcript_name),
naive=unique(filt_pooled_naive$ensembl_transcript_name),
igf=unique(filt_pooled_igf$ensembl_transcript_name)
)
filt_pooled_alk <- alk_tx_regions
filt_pooled_naive <- naive_tx_regions
filt_pooled_igf <- igf_tx_regions
filt_pooled_mettl <- mettl_tx_regions
#################
# filter sites for common transcripts
alk_tx <- filt_pooled_alk %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_mettl)
mettl_tx <- filt_pooled_mettl %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_mettl)
# calculate weighted mod ratio
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_tx)
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_tx)
# Log2FC weighted mod ratio
log2fc_wmr <- log2fc_weighted_mod_ratio(alk_weighted_mod_ratio, mettl_weighted_mod_ratio, group1_name = "ALK", group2_name = "METTL")
# plot with DEG
p <- weighted_mod_ratio_and_DGE(log2fc_wmr, alk_vs_mettl_deg, log2fc_col = "alk_vs_mettl_log2FC", padj_col = "alk_vs_mettl_pval", group1_name = "ALK_KD", group2_name = "METTL_KD")
# Save weighted mod ratio dataframes
ggsave("/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/alk_mettl.pdf", p$plot)
# Summarize transcript biotypes and tx regions
summary_alk_mettl <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "ALK_KD", group2_name = "METTL_KD")
save_nested_list_to_excel(summary_alk_mettl, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/ALK_VS_METTL/summary_alk_mettl.xlsx")
DEG_igf_control <- read.csv("/Users/hannalee2002/cell-lines-project/DEG/DEG_igf_as_control.csv")
alk_vs_igf_deg <- DEG_igf_control %>%
select(ensembl_gene_id, alk_vs_igf_log2FC, alk_vs_igf_pval)
# filter sites for common transcripts
alk_tx <- filt_pooled_alk %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_igf)
igf_tx <- filt_pooled_igf %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$alk_igf)
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_tx, mod_ratio_column = "alk_mod_raio")
igf_weighted_mod_ratio <- calculate_weighted_mod_ratio(igf_tx, mod_ratio_column = "igf_mod_raio")
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_tx)
igf_weighted_mod_ratio <- calculate_weighted_mod_ratio(igf_tx)
# Log2FC weighted mod ratio
log2fc_wmr <- log2fc_weighted_mod_ratio(alk_weighted_mod_ratio, igf_weighted_mod_ratio, group1_name = "ALK", group2_name = "IGF")
# plot with DEG
p <- weighted_mod_ratio_and_DGE(log2fc_wmr, alk_vs_igf_deg, log2fc_col = "alk_vs_igf_log2FC", padj_col = "alk_vs_igf_pval", group1_name = "ALK_KD", group2_name = "IGF_KD")
# Save weighted mod ratio dataframes
ggsave("/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/alk_igf.pdf", p$plot)
# Summarize transcript biotypes and tx regions
summary_alk_igf <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "ALK_KD", group2_name = "IGF_KD")
save_nested_list_to_excel(summary_alk_igf, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_alk_igf.xlsx")
# read csv for DEG (IGF is control)
mettl_vs_igf_deg <- DEG_igf_control %>%
select(ensembl_gene_id, mettl_vs_igf_log2FC, mettl_vs_igf_pval)
mettl_tx <- filt_pooled_mettl %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$mettl_igf)
igf_tx <- filt_pooled_igf %>%
filter(ensembl_transcript_name %in% tx_dist_across_groups$mettl_igf)
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_tx, mod_ratio_column = "mettl_mod_raio")
igf_weighted_mod_ratio <- calculate_weighted_mod_ratio(igf_tx, mod_ratio_column = "igf_mod_raio")
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_tx)
igf_weighted_mod_ratio <- calculate_weighted_mod_ratio(igf_tx)
# Log2FC weighted mod ratio
log2fc_wmr <- log2fc_weighted_mod_ratio(mettl_weighted_mod_ratio, igf_weighted_mod_ratio, group1_name = "METTL", group2_name = "IGF")
# plot with DEG
p <- weighted_mod_ratio_and_DGE(log2fc_wmr, mettl_vs_igf_deg, log2fc_col = "mettl_vs_igf_log2FC", padj_col = "mettl_vs_igf_pval", group1_name = "METTL_KD", group2_name = "IGF_KD")
# Save weighted mod ratio dataframes
ggsave("/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/mettl_igf.pdf", p$plot)
# Summarize transcript biotypes and tx regions
summary_mettl_igf <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "METTL_KD", group2_name = "IGF_KD")
save_nested_list_to_excel(summary_mettl_igf, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_mettl_igf.xlsx")
alk_naive_tx <- filt_pooled_alk %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$alk_naive)
igf_naive_tx <- filt_pooled_igf %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$naive_igf)
mettl_naive_tx <- filt_pooled_mettl %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$mettl_naive)
naive_vs_alk <- filt_pooled_naive %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$alk_naive)
naive_vs_igf <- filt_pooled_naive %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$naive_igf)
naive_vs_mettl <- filt_pooled_naive %>%
filter(ensembl_transcript_name%in%tx_dist_across_groups$mettl_naive)
# Calculated Weighted Mod Ratio for commonly methylated transcripts (n=)
alk_weighted_mod_ratio <- calculate_weighted_mod_ratio(alk_naive_tx)
igf_weighted_mod_ratio <- calculate_weighted_mod_ratio(igf_naive_tx)
mettl_weighted_mod_ratio <- calculate_weighted_mod_ratio(mettl_naive_tx)
naive_vs_alk_wmr <- calculate_weighted_mod_ratio(naive_vs_alk)
naive_vs_igf_wmr <- calculate_weighted_mod_ratio(naive_vs_igf)
naive_vs_mettl_wmr <- calculate_weighted_mod_ratio(naive_vs_mett)
naive_vs_mettl_wmr <- calculate_weighted_mod_ratio(naive_vs_mettl)
log2fc_alk_naive <- log2fc_weighted_mod_ratio(group1_df = alk_weighted_mod_ratio, group2_df = naive_vs_alk_wmr, group1_name = "ALK", group2_name = "NAIVE")
log2fc_igf_naive <- log2fc_weighted_mod_ratio(group1_df = igf_weighted_mod_ratio, group2_df = naive_vs_igf_wmr, group1_name = "IGF", group2_name = "NAIVE")
log2fc_mettl_naive <- log2fc_weighted_mod_ratio(group1_df = mettl_weighted_mod_ratio, group2_df = naive_vs_mettl_wmr, group1_name = "METTL", group2_name = "NAIVE")
# read files for DEG
DEG_naive_as_control <- read.csv('/Users/hannalee2002/cell-lines-project/DEG/DEG_naive_as_control.csv')
alk_naive_deg <- DEG_naive_as_control %>%
select(ensembl_gene_id, alk_vs_naive_log2FC, alk_vs_naive_pval)
igf_naive_deg <- DEG_naive_as_control %>%
select(ensembl_gene_id, igf_vs_naive_log2FC, igf_vs_naive_pval)
mettl_naive_deg <- DEG_naive_as_control %>%
select(ensembl_gene_id, mettl_vs_naive_log2FC, mettl_vs_naive_pval)
p <- weighted_mod_ratio_and_DGE(log2fc_alk_naive, alk_naive_deg, log2fc_col = "alk_vs_naive_log2FC", padj_col = "alk_vs_naive_pval", group1_name = "ALK_KD", group2_name = "NAIVE")
p2 <- weighted_mod_ratio_and_DGE(log2fc_igf_naive, igf_naive_deg, log2fc_col = "igf_vs_naive_log2FC", padj_col = "igf_vs_naive_pval", group1_name = "IGF_KD", group2_name = "NAIVE")
p3 <- weighted_mod_ratio_and_DGE(log2fc_mettl_naive, mettl_naive_deg, log2fc_col = "mettl_vs_naive_log2FC", padj_col = "mettl_vs_naive_pval", group1_name = "METT_KD", group2_name = "NAIVE")
# Save plots and files
ggsave("alk_naive.pdf", p$plot)
summary_alk_naive <- summarize_weighted_mod_ratio_and_DGE(p$data,group1_name = "ALK_KD", group2_name = "NAIVE_KD")
summary_igf_naive <- summarize_weighted_mod_ratio_and_DGE(p2$data,group1_name = "IGF_KD", group2_name = "NAIVE_KD")
summary_mettl_naive <- summarize_weighted_mod_ratio_and_DGE(p3$data,group1_name = "METTL_KD", group2_name = "NAIVE_KD")
save_nested_list_to_excel(summary_alk_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_alk_naive.xlsx")
save_nested_list_to_excel(summary_igf_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_igf_naive.xlsx")
save_nested_list_to_excel(summary_mettl_naive, "/Users/hannalee2002/cell-lines-project/m6A/Weighted_mod_ratio/summary_common_mettl_naive.xlsx")
View(DEG_naive_as_control)
m6A_writers <- c("FTO", "ALKBH5", "METTL3", "METTL5", "METTL14", "METTL16", "WTAP", "VIRMA", "RBM15", "ZNF217", "HAKAI", "ZCH13")
m6A_readers <- c("ELAVL1", "YTHDF1", "YTHDF2", "YTHDF3", "YTHDC1", "YTHDC2", "IGF2BP1", "IGF2BP2", "IGF2BP3", "HNRNPA2B1", "HNRNPC")
m6A_erasers <- c("FTO", "ALKBH5")
m6A_regulators <- tibble(
gene = c(m6A_writers, m6A_readers, m6A_erasers),
role = c(
rep("writer", length(m6A_writers)),
rep("reader", length(m6A_readers)),
rep("eraser", length(m6A_erasers))
)
)
View(m6A_regulators)
colnames(DEG_naive_as_control)
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene)
View(m6a_deg_naive_as_ctrl)
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(3:10)
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(3:9)
View(m6a_deg_naive_as_ctrl)
m6a_deg_igf_as_ctrl <- DEG_igf_control %>%
filter(external_gene_name %in% m6A_regulators$gene)
colnames(m6a_deg_igf_as_ctrl)
m6a_deg_igf_as_ctrl <- DEG_igf_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(6:10)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene)
colnames(m6a_deg_mettl_as_ctrl)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(5:6)
write.csv(m6A_regulators, "m6A_regulators.csv")
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
View(m6a_regulators_cell)
# Generate data for the expression of readers, writers and erasers
m6A_writers <- c("FTO", "ALKBH5", "METTL3", "METTL5", "METTL14", "METTL16", "WTAP", "VIRMA", "RBM15", "ZNF217", "HAKAI", "ZC3H13")
m6A_regulators <- tibble(
gene = c(m6A_writers, m6A_readers, m6A_erasers),
role = c(
rep("writer", length(m6A_writers)),
rep("reader", length(m6A_readers)),
rep("eraser", length(m6A_erasers))
)
)
write.csv(m6A_regulators, "m6A_regulators.csv")
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(3:9)
m6a_deg_igf_as_ctrl <- DEG_igf_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(6:10)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(5:6)
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6A_writers <- c("FTO", "ALKBH5", "METTL3", "METTL5", "METTL14", "METTL16", "WTAP", "VIRMA", "RBM15", "ZNF217", "CBLL1", "ZC3H13")
m6A_readers <- c("ELAVL1", "YTHDF1", "YTHDF2", "YTHDF3", "YTHDC1", "YTHDC2", "IGF2BP1", "IGF2BP2", "IGF2BP3", "HNRNPA2B1", "HNRNPC")
m6A_erasers <- c("FTO", "ALKBH5")
m6A_regulators <- tibble(
gene = c(m6A_writers, m6A_readers, m6A_erasers),
role = c(
rep("writer", length(m6A_writers)),
rep("reader", length(m6A_readers)),
rep("eraser", length(m6A_erasers))
)
)
write.csv(m6A_regulators, "m6A_regulators.csv")
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(3:9)
m6a_deg_igf_as_ctrl <- DEG_igf_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(6:10)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(5:6)
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_igf_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
View(m6a_regulators_cell)
View(m6a_deg_mettl_as_ctrl)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(5:7)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
View(m6a_deg_mettl_as_ctrl)
colnames(DEG_mettl_control)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(c(5:6, 9))
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
View(m6a_regulators_cell)
head(m6a_regulators_cell)
m6A_writers <- c("METTL3", "METTL5", "METTL14", "METTL16", "WTAP", "VIRMA", "RBM15", "ZNF217", "CBLL1", "ZC3H13")
m6A_readers <- c("ELAVL1", "YTHDF1", "YTHDF2", "YTHDF3", "YTHDC1", "YTHDC2", "IGF2BP1", "IGF2BP2", "IGF2BP3", "HNRNPA2B1", "HNRNPC")
m6A_erasers <- c("FTO", "ALKBH5")
m6A_regulators <- tibble(
gene = c(m6A_writers, m6A_readers, m6A_erasers),
role = c(
rep("writer", length(m6A_writers)),
rep("reader", length(m6A_readers)),
rep("eraser", length(m6A_erasers))
)
)
write.csv(m6A_regulators, "m6A_regulators.csv")
m6a_deg_naive_as_ctrl <- DEG_naive_as_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(3:9)
m6a_deg_igf_as_ctrl <- DEG_igf_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(6:10)
m6a_deg_mettl_as_ctrl <- DEG_mettl_control %>%
filter(external_gene_name %in% m6A_regulators$gene) %>%
select(c(5:6, 9))
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_igf_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("log2FC")) %>%
pivot_longer(
cols = ends_with("log2FC"),
names_to = "comparison",
values_to = "log2FC"
)
m6a_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("log2FC")) %>%
tidyr::pivot_longer(
cols = ends_with("log2FC"),
names_to = "comparison",
values_to = "log2FC"
)
View(m6a_long)
# Reshape log2FC values
log2fc_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("log2FC")) %>%
pivot_longer(
cols = ends_with("log2FC"),
names_to = "comparison",
values_to = "log2FC"
)
# Reshape p-values
pval_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("pval")) %>%
pivot_longer(
cols = ends_with("pval"),
names_to = "comparison",
values_to = "pval"
)
# Clean column names to match
log2fc_long$comparison <- gsub("_log2FC", "", log2fc_long$comparison)
pval_long$comparison <- gsub("_pval", "", pval_long$comparison)
# Join log2FC and pval by gene + comparison
m6a_long <- left_join(log2fc_long, pval_long, by = c("gene", "role", "comparison"))
log2fc_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("log2FC")) %>%
tidyr::pivot_longer(
cols = ends_with("log2FC"),
names_to = "comparison",
values_to = "log2FC"
)
# Reshape p-values
pval_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("pval")) %>%
tidyr::pivot_longer(
cols = ends_with("pval"),
names_to = "comparison",
values_to = "pval"
)
# Clean column names to match
log2fc_long$comparison <- gsub("_log2FC", "", log2fc_long$comparison)
pval_long$comparison <- gsub("_pval", "", pval_long$comparison)
# Join log2FC and pval by gene + comparison
m6a_long <- left_join(log2fc_long, pval_long, by = c("gene", "role", "comparison"))
View(m6a_long)
View(pval_long)
View(log2fc_long)
# Join log2FC and pval by gene + comparison
m6a_long <- merge(log2fc_long, pval_long, by = c("gene", "role", "comparison"))
View(m6a_long)
m6a_regulators_cell %>%
count(gene, role) %>%
filter(n > 1)
m6a_regulators_cell %>%
dplyr::count(gene, role) %>%
filter(n > 1)
View(m6a_deg_naive_as_ctrl)
View(DEG_naive_as_control)
# remove duplicate YTHDC1
m6a_regulators_cell <- m6a_regulators_cell %>%
filter(gene == "YTHDC1" & alk_vs_naive_log2FC == -0.3723324)
# remove duplicate YTHDC1
m6a_regulators_cell <- m6a_regulators_cell %>%
filter(c(gene == "YTHDC1" & alk_vs_naive_log2FC == -0.3723324))
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_igf_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- m6a_regulators_cell %>%
filter(c(gene == "YTHDC1" & alk_vs_naive_log2FC == -0.3723324))
# remove duplicate YTHDC1
m6a_regulators_cell <- m6a_regulators_cell %>%
filter(gene != "YTHDC1" & alk_vs_naive_log2FC != -0.3723324)
m6a_regulators_cell <- merge(m6A_regulators, m6a_deg_naive_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_igf_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
m6a_regulators_cell <- merge(m6a_regulators_cell, m6a_deg_mettl_as_ctrl, by.x= "gene", by.y= "external_gene_name", all = TRUE)
# remove duplicate YTHDC1
m6a_regulators_cell <- m6a_regulators_cell %>%
filter(gene != "YTHDC1" & alk_vs_naive_log2FC != -0.3723324)
> m6a_regulators_cell %>%
+     dplyr::count(gene, role) %>%
+     filter(n > 1)
m6a_regulators_cell %>%
count(gene, role) %>%
filter(n > 1)
m6a_regulators_cell %>%
dplyr::count(gene, role) %>%
filter(n > 1)
# Reshape log2FC values
log2fc_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("log2FC")) %>%
tidyr::pivot_longer(
cols = ends_with("log2FC"),
names_to = "comparison",
values_to = "log2FC"
)
# Reshape p-values
pval_long <- m6a_regulators_cell %>%
select(gene, role, ends_with("pval")) %>%
tidyr::pivot_longer(
cols = ends_with("pval"),
names_to = "comparison",
values_to = "pval"
)
log2fc_long$comparison <- gsub("_log2FC", "", log2fc_long$comparison)
pval_long$comparison <- gsub("_pval", "", pval_long$comparison)
# Join log2FC and pval by gene + comparison
m6a_long <- merge(log2fc_long, pval_long, by = c("gene", "role", "comparison"))
View(m6a_long)
ggplot(m6a_long, aes(x = comparison, y = gene, fill = log2FC)) +
geom_tile(color = "white") +
geom_text(aes(label = ifelse(pval < 0.05, "*", "")), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Comparison", y = "Gene", fill = "log2FC", title = "m6A Regulator Heatmap with Significance")
ggplot(m6a_long, aes(x = comparison, y = gene, fill = log2FC)) +
geom_tile(color = "white") +
geom_text(aes(label = ifelse(pval < 0.05, "*", "")), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
facet_wrap(~ role, scales = "free_y", ncol = 1) +  # Split by writer/reader/eraser
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold", size = 12)
) +
labs(x = "Comparison", y = "Gene", fill = "log2FC", title = "m6A Regulator Heatmap by Role")
p<- ggplot(m6a_long, aes(x = comparison, y = gene, fill = log2FC)) +
geom_tile(color = "white") +
geom_text(aes(label = ifelse(pval < 0.05, "*", "")), color = "black") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
facet_wrap(~ role, scales = "free_y", ncol = 1) +  # Split by writer/reader/eraser
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold", size = 12)
) +
labs(x = "Comparison", y = "Gene", fill = "log2FC", title = "m6A Regulator Heatmap by Role")
ggsave("heatmap_of_m6a_regulators.pdf", p)
m6a_regulators_cell
View(m6A_regulators)
ec_vs_gbm <- read.csv("/Users/hannalee2002/M6A_Glioma/Entry_Cortex/DEG_EntryCortex_vs_AA.csv")
ec_vs_aa <- read.csv("/Users/hannalee2002/M6A_Glioma/Entry_Cortex/DEG_EntryCortex_vs_AA.csv")
ec_vs_oo <- read.csv("/Users/hannalee2002/M6A_Glioma/Entry_Cortex/DEG_EntryCortex_vs_OO.csv")
ec_vs_gbm <- read.csv("/Users/hannalee2002/M6A_Glioma/Entry_Cortex/DEG_EntryCortex_vs_GBM.csv")
View(ec_vs_aa)
ec_vs_aa <- ec_vs_aa[,c(1,3,6)]
ec_vs_aa <- ec_vs_aa[,c(1,3,6)]
ec_vs_oo <- ec_vs_oo[,c(1,3,6)]
ec_vs_gbm <- ec_vs_gbm[,c(1,3,6)]
ec_vs_glioma_m6a_regulators <- merge(m6A_regulators, ec_vs_aa, by.x="gene", by.y="X")
View(ec_vs_glioma_m6a_regulators)
ec_vs_glioma_m6a_regulators <- merge(m6A_regulators, ec_vs_aa, by.x="gene", by.y="X", all.x=TRUE)
ec_vs_glioma_m6a_regulators <- merge(ec_vs_glioma_m6a_regulators, ec_vs_oo, by.x="gene", by.y="X", all.x=TRUE)
ec_vs_glioma_m6a_regulators <- merge(ec_vs_glioma_m6a_regulators, ec_vs_gbm, by.x="gene", by.y="X", all.x=TRUE)
write.csv(ec_vs_glioma_m6a_regulators, "ec_vs_glioma_m6a_regulators.csv")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
